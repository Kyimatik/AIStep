import json
import asyncio
import logging
import sys
from openai import OpenAI
import requests
import os
import time 

from aiogram.types import ReplyKeyboardRemove
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
import subprocess
import speech_recognition as sr
from pydub import AudioSegment
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import buttons
from states import Cordinates


gpt_api_key = "?" # –∫–ª—é—á –æ—Ç GPT—à–∫–∏
googlemaps_api_key = "?" 


client = OpenAI(api_key=gpt_api_key)


TOKEN = "?"
bot = Bot(TOKEN)
dp = Dispatcher()   
router = Router()

r = sr.Recognizer()

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å <b>{message.from_user.first_name}</b>!
–°–æ–∑–¥–∞–¥–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–∞—Å —Å AIStep""", parse_mode="HTML", reply_markup=buttons.vseverno)

@dp.callback_query(lambda callback_query: callback_query.data == "yes")
async def letsgo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ", reply_markup=buttons.otmena)
    await state.set_state(Cordinates.place)

@dp.message(Cordinates.place)
async def getlocation(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ReplyKeyboardRemove())
        return
    await state.update_data(place=message.text)
    await message.answer("–î–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞: ", reply_markup=buttons.mainkb)
    await state.set_state(Cordinates.radius)

@dp.message(Cordinates.radius)
async def getradius(message: Message, state: FSMContext):
    await state.update_data(radius=message.text)
    await message.answer("""–í–∞—à–∏ <i>–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</i>?
–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ –ø—É—Ç–∏ ? 
–í—ã –º–æ–∂–µ—Ç–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–ø–∏—Å–∞—Ç—å üìÑ, —Ç–∞–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π üó£.""", parse_mode="HTML")
    await state.set_state(Cordinates.prefer)

@dp.message(Cordinates.prefer)
async def getpreferences(message: Message, state: FSMContext):
    if message.content_type == 'text':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        await state.update_data(prefer=message.text)
    elif message.content_type == 'voice':
        # –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª
        voice = message.voice
        file_info = await bot.get_file(voice.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_name = f"{voice.file_id}.ogg"
        file_name_wav = f"{voice.file_id}.wav"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.download_file(file_info.file_path, file_name)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ ogg –≤ wav —Å –ø–æ–º–æ—â—å—é ffmpeg
        subprocess.call(['ffmpeg', '-i', file_name, file_name_wav])

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        prefer_text = recognize_audio(file_name_wav)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await state.update_data(prefer=prefer_text)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(file_name)
        os.remove(file_name_wav)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    data = await state.get_data()
    place = data["place"]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    radius = data["radius"]  # –†–∞–¥–∏—É—Å
    prefer = data["prefer"]  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

    await message.answer(f"""<b>–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> - {place}
<b>–î–ª–∏–Ω–∞ –ú–∞—Ä—à—Ä—É—Ç–∞</b> - {radius}
<b>–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b> - {prefer}
""", parse_mode="HTML")

    # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Google Places API —Å –ø–æ–º–æ—â—å—é ChatGPT
    places_api_query = generate_places_api_query(client, place, radius, prefer)

    # –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç
    places_results = get_places(places_api_query)
    location_part = places_api_query.split("location=")[1].split("&")[0]

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
    latitude, longitude = location_part.split(',')

    cor = []
    sor = []
    for i in places_results:
        cor.append(f"{i['coordinates']}")
    for coord in cor:
        # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç–æ–π
        lat, lng = coord.strip('()').split(', ')
        sor.append((float(lat), float(lng)))
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    chunk_size = 9  # –ú–æ–∂–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã URL

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –∫–∞—Ä—Ç—ã
    base_static_map_url = (
        f"https://maps.googleapis.com/maps/api/staticmap?"
        f"size=600x400&"
        f"markers=color:red%7Clabel:U%7C{latitude},{longitude}&"  # –ú–∞—Ä–∫–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )

    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ chunk_size –º–∞—Ä–∫–µ—Ä–æ–≤
    for start in range(0, len(sor), chunk_size):
        # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
        partial_url = base_static_map_url
        chunk = sor[start:start + chunk_size]

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
        for i, (lat, lng) in enumerate(chunk):
            partial_url += f"markers=color:blue%7Clabel:{i+1}%7C{lat},{lng}&"

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            directions_url = (
                f"https://maps.googleapis.com/maps/api/directions/json?"
                f"origin={latitude},{longitude}&"
                f"destination={lat},{lng}&"
                f"key={googlemaps_api_key}"
            )
            directions_response = requests.get(directions_url)

            if directions_response.status_code == 200:
                directions_data = directions_response.json()
                if directions_data['routes']:
                    route_points = directions_data['routes'][0]['overview_polyline']['points']
                    partial_url += f"path=enc:{route_points}&"
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Ä—à—Ä—É—Ç–∞: {directions_response.status_code}")

        # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –≤ –∫–æ–Ω—Ü–µ
        partial_url += f"key={googlemaps_api_key}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É URL
        if len(partial_url) > 2048:
            print("URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Static Map API
        static_map_response = requests.get(partial_url)

        if static_map_response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            with open(f'map_with_routes_{start//chunk_size + 1}.png', 'wb') as file:
                file.write(static_map_response.content)
            print(f"–ö–∞—Ä—Ç–∞ {start//chunk_size + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Ä—Ç—ã: {static_map_response.status_code}")

    
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
    for i in range(1, (len(sor) // chunk_size) + 2):
        file_path = rf'C:\Users\STE\Desktop\HACKATHON\map_with_routes_{i}.png'
        
        time.sleep(5)
        if os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            photo = FSInputFile(file_path)
            await message.answer_photo(photo=photo)
    
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä–∫–µ—Ä–∞—Ö –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
            all_places_info = ""
            marker_number = 1
    
            # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ä–∞—Ö
            start_index = (i - 1) * chunk_size
            end_index = min(len(sor), i * chunk_size)
    
            for j in range(start_index, end_index):
                lat, lng = sor[j]
                place_info = places_results[j]  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∫–µ—Ä–µ
                name = place_info['name']  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                rating = place_info.get('rating', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω')  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                address = place_info.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')  # –ê–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è
    
                # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ä–∞—Ö
                all_places_info += f"‚Ññ {marker_number}: {name}, –∞–¥—Ä–µ—Å: {address}, —Ä–µ–π—Ç–∏–Ω–≥: {rating}\n"
                marker_number += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ
    
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ä–∞—Ö –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(all_places_info)
    
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ–π
            all_places_info = ""
    
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω.")
            except OSError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        else:
            print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")


def generate_places_api_query(client, place, radius, prefer):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL-–∑–∞–ø—Ä–æ—Å –¥–ª—è Google Places API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI.

    :param client: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI.
    :param place: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ (—à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞).
    :param radius: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.
    :param prefer: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∏–ø –º–µ—Å—Ç).
    :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL-–∑–∞–ø—Ä–æ—Å –¥–ª—è Google Places API.
    """
    prompt = f"""
    –û—Ç–ø—Ä–∞–≤–ª—è–π —Ö–æ—Ä–æ—à–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ url –∑–∞—Ä–æ—Å—ã , –µ—Å–ª–∏ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ —Ü–∏—Ñ—Ä–∞ –±—É–∫–≤–∞–º–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —É–∫–∞–∑—ã–≤–∞–π —Ü–∏—Ñ—Ä–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
    –ë–µ–∑ –û–ü–ò–°–ê–ù–ò–Ø –ü–û–ñ–ê–õ–£–ô–°–¢–ê –¢–û–õ–¨–ö–û URL –æ—Ç–ø—Ä–∞–≤—å 
    –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —É–±–µ–¥–∏—Å—å —á—Ç–æ –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –∫—Ä–æ–º–µ URL –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É , —Ç–∞–∫ –∫–∞–∫ —Ç–≤–æ–π url –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –∏–∑ –∑–∞ —Ç–æ–≥–æ —á—Ç–æ —Ç—ã –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∏–¥–∞–µ—à—å , –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ—à–∏–±–∫–∏.
    –£–±–µ–¥–∏—Å—å —á—Ç–æ –±–µ–∑ –≤—Å—è–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–µ–ª–∞–µ—à—å —Ç–æ–ª—å–∫–æ URL –∑–∞–ø—Ä–æ—Å.
    –ò—Å–ø–æ–ª—å–∑—É–π –≤–æ—Ç —ç—Ç–æ—Ç –≤–æ—Ç –∫–ª—é—á - ? - google places API
    –¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è Google Places API. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å:

1. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ü–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–∞—Ñ–µ, —à–∫–æ–ª—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Å—Ç–∞.
2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –¥–ª—è Google Places API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {place}, —Ä–∞–¥–∏—É—Å–∞ {radius} –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π {prefer}.
3. –ò—Å–ø–æ–ª—å–∑—É–π Google Places API –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ "{prefer}" –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {place}.
4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ URL –¥–ª—è Google Places API.

–ü—Ä–∏–º–µ—Ä:
https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={place}&radius={radius}&keyword={prefer}&key={googlemaps_api_key}



    """
    
    response = client.chat.completions.create(
        #model="gpt-3.5-turbo-1106",
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è Google Maps API."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        temperature=0.7,
        n=1
    )

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ –æ—Ç–≤–µ—Ç–∞
    generated_query = response.choices[0].message.content.strip()
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:", generated_query)
    
    return generated_query

def get_places(query):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Google Places API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º.
    """
    response = requests.get(query)

    if response.status_code == 200:
        places_data = response.json()

        if 'results' in places_data:
            places = []
            for place in places_data['results']:
                name = place.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                lat = place['geometry']['location']['lat']
                lng = place['geometry']['location']['lng']
                rating = place.get('rating', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω')  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                address = place.get('vicinity', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')  # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
                places.append({
                    "name": name,
                    "coordinates": (lat, lng),
                    "rating": rating,
                    "address": address
                })

            return places
        else:
            return []
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Å—Ç: {response.status_code}")
        return []




# –°–¥–µ–ª–∞—Ç—å –≤—Å–µ—Ö ebnut' , Bam-bum 

def get_directions(place, destination):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–æ—á–∫–∏ place –¥–æ —Ç–æ—á–∫–∏ destination —Å –ø–æ–º–æ—â—å—é Google Directions API.
    :param place: –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    :param destination: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞).
    :return: –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    directions_url = f"https://maps.googleapis.com/maps/api/directions/json?origin={place}&destination={destination}&key={googlemaps_api_key}"
    response = requests.get(directions_url)

    if response.status_code == 200:
        directions_data = response.json()

        if directions_data["status"] == "OK":
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
            route = directions_data["routes"][0]
            leg = route["legs"][0]

            distance = leg["distance"]["text"]
            duration = leg["duration"]["text"]
            steps = leg["steps"]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            directions_text = f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}, –í—Ä–µ–º—è: {duration}\n\n–®–∞–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞:\n"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            for step in steps:
                instructions = step["html_instructions"]
                distance_step = step["distance"]["text"]
                directions_text += f"{instructions} ({distance_step})\n"

            return directions_text
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç."
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Ä—à—Ä—É—Ç–∞: {response.status_code}")
        return None



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
def recognize_audio(file_path):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ ogg –≤ wav —Å –ø–æ–º–æ—â—å—é pydub
    audio = AudioSegment.from_ogg(file_path)
    audio.export("temp.wav", format="wav")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SpeechRecognition –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    try:
        with sr.AudioFile("temp.wav") as source:
            audio_data = r.record(source)
            text = r.recognize_google(audio_data, language="ru-RU")
            return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–∏—Å—É: {e}"
    finally:
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –º–æ–∂–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
        if os.path.exists("temp.wav"):
            try:
                os.remove("temp.wav")
            except PermissionError:
                print("–§–∞–π–ª –≤—Å—ë –µ—â—ë –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω")



@dp.message(F.text.contains("–û—Ç–º–µ–Ω–∞ ‚ùå"))
async def otmenafunc(message: Message):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", reply_markup=ReplyKeyboardRemove())
    return

async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


# –ù–µ —É—Ö–æ–¥–∏ —Å–º–∏—Ä–µ–Ω–Ω–æ 
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ , –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å - 2gis.